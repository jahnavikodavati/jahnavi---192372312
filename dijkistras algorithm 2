import heapq
from collections import defaultdict
import sys

def dijkstra(n, edges, source, target):
    # Step 1: Build the adjacency list
    graph = defaultdict(list)
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))  # Assuming it's an undirected graph

    # Step 2: Initialize the distance array and priority queue
    distances = [sys.maxsize] * n
    distances[source] = 0
    priority_queue = [(0, source)]  # (distance, vertex)

    while priority_queue:
        current_distance, current_vertex = heapq.heappop(priority_queue)

        # If we reach the target, we can return the distance
        if current_vertex == target:
            return current_distance

        # If a shorter path to current_vertex has been found
        if current_distance > distances[current_vertex]:
            continue

        # Step 3: Explore neighbors
        for neighbor, weight in graph[current_vertex]:
            distance = current_distance + weight
            
            # Only consider this new path if it's better
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances[target] if distances[target] != sys.maxsize else None

# Test Case 1
n1 = 6
edges1 = [(0, 1, 7), (0, 2, 9), (0, 5, 14), (1, 2, 10), (1, 3, 15),
           (2, 3, 11), (2, 5, 2), (3, 4, 6), (4, 5, 9)]
source1 = 0
target1 = 4
output1 = dijkstra(n1, edges1, source1, target1)
print(f"Test Case 1 Output: {output1}")  # Output: 20

# Test Case 2
n2 = 5
edges2 = [(0, 1, 10), (0, 4, 3), (1, 2, 2), (1, 4, 4), (2, 3, 9),
           (3, 2, 7), (4, 1, 1), (4, 2, 8), (4, 3, 2)]
source2 = 0
target2 = 3
output2 = dijkstra(n2, edges2, source2, target2)
print(f"Test Case 2 Output: {output2}")  # Output: 8
