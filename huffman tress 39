import heapq

class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

def build_huffman_tree(characters, frequencies):
    priority_queue = []
    
    # Step 1: Create a priority queue with initial nodes
    for char, freq in zip(characters, frequencies):
        heapq.heappush(priority_queue, Node(char, freq))
    
    # Step 2: Build the tree
    while len(priority_queue) > 1:
        left = heapq.heappop(priority_queue)
        right = heapq.heappop(priority_queue)
        
        merged = Node(None, left.freq + right.freq)
        merged.left = left
        merged.right = right
        
        heapq.heappush(priority_queue, merged)
    
    return priority_queue[0]  # The root of the tree

def generate_codes(node, current_code="", codes={}):
    if node is not None:
        # If it's a leaf node, assign the code
        if node.char is not None:
            codes[node.char] = current_code
        generate_codes(node.left, current_code + "0", codes)
        generate_codes(node.right, current_code + "1", codes)
    return codes

def huffman_coding(characters, frequencies):
    root = build_huffman_tree(characters, frequencies)
    codes = generate_codes(root)
    return [(char, codes[char]) for char in characters]

# Test Case 1
n1 = 4
characters1 = ['a', 'b', 'c', 'd']
frequencies1 = [5, 9, 12, 13]
output1 = huffman_coding(characters1, frequencies1)
print(output1)  # [('a', '110'), ('b', '10'), ('c', '0'), ('d', '111')]

# Test Case 2
n2 = 6
characters2 = ['f', 'e', 'd', 'c', 'b', 'a']
frequencies2 = [5, 9, 12, 13, 16, 45]
output2 = huffman_coding(characters2, frequencies2)
print(output2)  # [('a', '0'), ('b', '101'), ('c', '100'), ('d', '111'), ('e', '1101'), ('f', '1100')]
